using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace LicenseGenerator
{
    class Program
    {

        /// <summary>
        /// Private key (Base64 string) to sign the license, DO NOT pass it to client. 
        /// 
        /// Generated by code below:
        ///
        /// RSACryptoServiceProvider sp = new RSACryptoServiceProvider(1024);
        /// string privateKey = Convert.ToBase64String(Encoding.ASCII.GetBytes(sp.ToXmlString(true))); // private key
        /// string publicKey = Convert.ToBase64String(Encoding.ASCII.GetBytes(sp.ToXmlString(false))); // public key
        ///
        /// </summary>
        private static readonly string _privateKey = "PFJTQUtleVZhbHVlPjxNb2R1bHVzPnRZbWRDOU5jRGhtQTBWSlE4QWpjcllRVWp1bU54WXZFNVRzOU84VENBMEdYaEhqeEFuZ0RxdkY5SUxobUg3U3ErZEQvSUgraVlBQitJZ0UvTmxMOS83OWxEcjljN3d4SS9PZXAyc3BHTExYelVwN1pxWElwMjZmS3dYWEpmVGJhdHFwUldkYUp1ZGNIc0lCMHZFREV3cUNEZ3NVYVFGUVppdU1yOTBNMlVDVT08L01vZHVsdXM+PEV4cG9uZW50PkFRQUI8L0V4cG9uZW50PjxQPndnQVRPRE9tV01tb2NGL0V1aHdhYnFrVlY5UEQzY05GZnBpK0NMaWpNN3grUWFrL01wZ1JHcFdyWUE4SlJpODJwODJtdDRVQjlHamx2b1pkcjVNZEF3PT08L1A+PFE+NzQzcHBkL2IraC9sR3c0S29tVUUzcEUxT0FDT0ZJVFhNWmxiS2N0M1R2UHhtak41Rk14amVBOGxkYmVFYXhzazJvQTBwMkRLc1daRUdhRGJKOVV4dHc9PTwvUT48RFA+QklDZDhaTDVURnc1eFluamRmSkxCc0J6MTFyNTA3N0JjU080WFZsenFESzZ0MmxuSnhSeWFTeUtFcXVtcW5OVUVHYnNkSnZvcExSK2lJSnowQ3hZNHc9PTwvRFA+PERRPmpUaUE5Q3Q3T0FJVGd4YU5DRjA3T0tZcjFIN25RNHRvZlRIbC8wYVdhRElCVFNGcEVPekkrdDhhKzBHYnk3UnR6bTNrSElSQUdjS3JCTnpDTmNKR0V3PT08L0RRPjxJbnZlcnNlUT5WYlhnd1NlNWJYb0pOSTd5V3RpR0VXakE2aFRheFZ0eithVVorNjV4N1JqcUd0Tkt6VmZ2aXFxMXBIMUI1MlJWVTU3dGRJRlhzUFp4K1ZXKzhqeVBEUT09PC9JbnZlcnNlUT48RD5QMDQ3NjlISytrZStla0JnWlRSUjhGaHM2dUZiUlJaV2xUR3hTdFIwYTdwRjRqWmlwVi9BdDYzNjJwd3pVTDhxR0cvZmFDL2FLZXhDRUEyclE0QnhmbFRKT1R6ODQrTkkrb2FKa2RxM3F0Tm9JdjFKK1pkbzI3VndFTTFVdHZUcEFVUWh1KzAxTEJDTEFrQjgrVk9qZGE0OU82RVNqWHlzQjJkV1FpbEo3NGs9PC9EPjwvUlNBS2V5VmFsdWU+";

        private static int FreeTrialDays = 30;

        static void Main(string[] args)
        {
            if (args.Contains("/f") || args.Contains("/free-trial"))
            {
                string email = "ANONYMOUS";
                DateTime date = DateTime.Now.AddDays(FreeTrialDays);

                var licenseData =
                    $"ID:{Guid.NewGuid().ToString().Replace("-", "").ToUpper()}\r\n" +
                    $"EMAIL:{email}\r\n" +
                    $"EXPIRATION:{date.ToString("yyyy-MM-dd")}";

                var key = RSASignData(licenseData, Encoding.ASCII.GetString(Convert.FromBase64String(_privateKey)));

                Console.WriteLine($"{licenseData}\r\n{key}");
            }
            else if (args.Contains("/i") || args.Contains("/interactive"))
            {
                Console.WriteLine("Welcom to the license generator for data editor portal.");
                string email;
                while (true)
                {
                    Console.Write("Please enter the user email: ");

                    email = Console.ReadLine();
                    if (!string.IsNullOrEmpty(email)) { break; }
                }

                DateTime date;
                while (true)
                {
                    Console.Write("Please enter the expired date (yyyy-MM-dd): ");

                    var dateStr = Console.ReadLine();
                    if (DateTime.TryParse(dateStr, out date)) break;
                }

                var licenseData =
                    $"ID:{Guid.NewGuid().ToString().Replace("-", "").ToUpper()}\r\n" +
                    $"EMAIL:{email}\r\n" +
                    $"EXPIRATION:{date.ToString("yyyy-MM-dd")}";

                var key = RSASignData(licenseData, Encoding.ASCII.GetString(Convert.FromBase64String(_privateKey)));

                Console.WriteLine($"{licenseData}\r\n{key}");
                Console.WriteLine();
                Console.WriteLine($"Press any key to close this window . . .");
                Console.ReadLine();
            }
            else
            {
                Console.WriteLine(
                    "Description:\n" +
                    "    Generate a Data Editor Portal License\n" +
                    "\n" +
                    "Usage:\n" +
                    "    LicenseGenerator [options]\n" +
                    "\n" +
                    "Options:\n" +
                    "    /f, /free-trial\t Generate a " + FreeTrialDays + " days free-trial license\n" +
                    "    /i, /interactive\t Generate license with input information\n"
                );
            }
        }

        private static string RSASignData(string plaintext, string privateKey)
        {
            byte[] encryptedData;
            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
            {
                rsa.FromXmlString(privateKey);
                encryptedData = rsa.SignData(Encoding.ASCII.GetBytes(plaintext), new SHA1CryptoServiceProvider());
                rsa.Dispose();
            }
            return Convert.ToBase64String(encryptedData);
        }
    }
}
